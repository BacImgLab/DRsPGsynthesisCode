%% lifeTcalculationbernsen.m
%
% Description:
%   This script processes FLIM (Fluorescence Lifetime Imaging Microscopy)
%   data. It segments labeled cell walls using binary masks generated by
%   the Fiji plugin `bersenThtest`, calculates lifetime distributions,
%   generates lifetime images, and saves relevant results.
%
% Requirements:
%   - Input images must be exported in OME-TIFF format.
%   - Binary masks must be preprocessed using Fiji's "bersenThtest" plugin.
%
% Note:
%   This script must be used in conjunction with Fiji/ImageJ to perform
%   Bernsen thresholding (adaptive local thresholding).
%% section 1: read all the intensity files and lifetimefiles, save them in stacks
clear
clc
dirRoot = ['D:\ImageData\SA\Lifetime\SA_Lifetime\Data\CFX']; % Replace with your actual path
fileIntensity = 'CFXintensityStack.tif'; % for saving the intensity file
fileLifetime = 'CFXlifetimeStack.tif'; % for saving the lifetime file
ch = [0,1];
fnum = 3; % number of file in each experiment
kk = 1; % for saving
for jj = 1 : 3 % cycle experiments
    subfolder = num2str(jj);
    filenameRoot = [num2str(jj)];
    for ii = 1 : fnum % cycle the folders
        filenameIn = ['CFX-' num2str(ii) '_ch' num2str(ch(1)) '.ome.tif']; % intensity file
        filenameLT = ['CFX-' num2str(ii) '_ch' num2str(ch(2)) '.ome.tif']; % lifetime file
        PathIn = fullfile(dirRoot,subfolder,filenameIn);
        PathLT = fullfile(dirRoot,subfolder,filenameLT);
        PathInsave = fullfile(dirRoot,fileIntensity);
        PathLtsave = fullfile(dirRoot,fileLifetime);
        % read the images
        ImIn = imread(PathIn);
        ImLT = imread(PathLT);
        if kk == 1;
            imwrite(ImIn,PathInsave,'tif','WriteMode','overwrite');
            imwrite(ImLT,PathLtsave,'tif','WriteMode','overwrite');
        else
            imwrite(ImIn,PathInsave,'tif','WriteMode','append');
            imwrite(ImLT,PathLtsave,'tif','WriteMode','append');
        end
        kk = kk + 1;
    end
end
%% section2: thresholding the intensity files using bernsen methods in Fiji
% this part is done in Fiji.
% the WT50uMintensityStack.tif is first converted to 8-bit
% then thresholded by adaptive local thresholding by bernsen method using windowsize = 7 and parameter_1 (contrast threshold) = 7;
% the resulted file is saved to WT50uMintensityStack-binary.tif

%% section3: remove all the background pixels in the lifetime/intensity images based on the binary mask
dirRoot = ['D:\ImageData\SA\Lifetime\SA_Lifetime\Data\CFX']; % Replace with your actual path
fileIntensity = 'CFXintensityStack.tif'; % the intensity file
fileLifetime = 'CFXlifetimeStack.tif'; % the lifetime file
fileBinary = 'CFXintensityStack-binary.tif'; % the thresholded binary file
fileIn_filter = 'CFXMintensityStack-filter.tif'; % the intensity file removing the background
fileLt_filter = 'CFXXMlifetimeStack-filter.tif'; % the lifetime file removing the background

imginfo = imfinfo(fullfile(dirRoot,fileIntensity));
LT_all = []; % to save the lifetime data
In_all = []; % to save the intensity data
kk = 1; % count and save all the results
% loop all the image
for ii = 1 : length(imginfo)
    ImIn = imread(fullfile(dirRoot,fileIntensity),ii); % intensity
    ImLT = imread(fullfile(dirRoot,fileLifetime),ii);  % lifetime
    ImBi = imread(fullfile(dirRoot,fileBinary),ii);    % binary mask
    Imbw = imquantize(ImBi,1); % get the thresholded image
    % threshold the lifetime image
    ImLT_th = uint16((Imbw-1).*double(ImLT)); % the lifetime image with background set to 0
    % threshold the intensity image
    ImIn_th = uint16((Imbw-1).*double(ImIn)); % the intensity image with background set to 0
    
    % digitize the lifetimes and intensity
    LT_mat = double(ImLT_th)/65535*10; % the life time was saved t/10*65535
    In_mat = double(ImIn_th);% the intensity
    
    % classify each pixel in short or long lifetime category
    LT_sample = LT_mat(LT_mat(:)>0); % Lifetime in ns
    In_sample = In_mat(LT_mat(:)>0); % intensity in double
    Im_LT16 = uint16(LT_sample/10*65535); % Lifetime in 16bit
   
    % get the lifetime and intensity distributions
    LT_all = [LT_all;LT_sample];
    In_all = [In_all;In_sample];
    % write the filtered images
    if ii == 1
        imwrite(ImLT_th,fullfile(dirRoot,fileLt_filter),'WriteMode','overwrite');
        imwrite(ImIn_th,fullfile(dirRoot,fileIn_filter),'WriteMode','overwrite');
    else
        imwrite(ImLT_th,fullfile(dirRoot,fileLt_filter),'WriteMode','append');
        imwrite(ImIn_th,fullfile(dirRoot,fileIn_filter),'WriteMode','append');
    end
    % save the results
    Result(ii).LT_sample = LT_sample;
    Result(ii).In_sample = In_sample;
end
% create the lifetime histogram
[h edges] = histcounts(LT_all,[0.3:0.03:3.6],'Normalization','probability');
xcenter = edges(1:end-1)+diff(edges)/2;
hLT = [xcenter',h'];
% calculate the average lifetime and its standard deviation
LT_mean = [mean(LT_all),std(LT_all)];
In_mean = [mean(In_all),std(In_all)];
filenameS = uiputfile('.mat','Save the results');
save(filenameS,'hLT','Result','LT_all','LT_mean','In_mean','In_all');
figure
bar(hLT(:,1),hLT(:,2));

%%
tao_th = 1.23;% lifetime threshold
Th = 450; % set the intensity threshold to distinguish the background and the signal
LT_all = []; % to save the lifetime data
In_all = []; % to save the intensity data
kk = 1; % count and save all the results
for jj = 1 : 8 % cycle experiments
    subfolder = num2str(jj);
    filenameRoot = [num2str(jj)];
    for ii = 1 : fnum % cycle the folders
        filenameIn = [filenameRoot '-' num2str(ii) '_ch' num2str(ch(1)) '.ome.tif']; % intensity file
        filenameLT = [filenameRoot '-' num2str(ii) '_ch' num2str(ch(2)) '.ome.tif']; % lifetime file
        PathIn = fullfile(dirRoot,subfolder,filenameIn);
        PathLT = fullfile(dirRoot,subfolder,filenameLT);
        % read the images
        
        % set threshold using ostu method
        %     Th = multithresh(ImIn); % find a threshold
        
        Imbw = imquantize(ImIn,Th); % get the thresholded image
        % threshold the lifetime image
        ImLT_th = uint16((Imbw-1).*double(ImLT)); % the lifetime image with background set to 0
        % threshold the intensity image
        ImIn_th = uint16((Imbw-1).*double(ImIn)); % the intensity image with background set to 0
        
        % digitize the lifetimes and intensity
        LT_mat = double(ImLT_th)/65535*10; % the life time was saved t/10*65535
        In_mat = double(ImIn_th);% the intensity
        
        % classify each pixel in short or long lifetime category
        LT_sample = LT_mat(LT_mat(:)>0); % Lifetime in ns
        In_sample = In_mat(LT_mat(:)>0); % intensity in double
        Im_LT16 = uint16(LT_sample/10*65535); % Lifetime in 16bit
        % short lifetime pixels, in Lifetime and intensity
        Im_short = LT_mat;
        Im_short((LT_mat>tao_th)) = 0;
        Im_short16 = uint16(Im_short/10*65535);
        
        Im_shortIn = In_mat;
        Im_shortIn((LT_mat>tao_th)) = 0;
        Im_shortIn16 = uint16(Im_shortIn);
        % long lifetime pixels, in Lifetime and intensity
        Im_long = LT_mat;
        Im_long((LT_mat<=tao_th)) = 0;
        Im_long16 = uint16(Im_long/10*65535);
        
        Im_longIn = In_mat;
        Im_longIn((LT_mat<tao_th)) = 0;
        Im_longIn16 = uint16(Im_longIn);
        % get the lifetime and intensity distributions
        LT_all = [LT_all;LT_sample];
        In_all = [In_all;In_sample];
        % save the results
        Result(kk).ImIn = ImIn;
        Result(kk).ImLT = ImLT;
        Result(kk).Th = Th;
        Result(kk).Imbw = Imbw;
        Result(kk).ImLT_Th = ImLT_th;
        Result(kk).Imbw = Imbw;
        Result(kk).LT_sample = LT_sample;
        Result(kk).In_sample = In_sample;
        % save the images
        Result(kk).Im_LT16 = Im_LT16; % life time image, t = gray/65535*10 ns;
        Result(kk).Im_short = Im_short;
        Result(kk).Im_long = Im_long;
        Result(kk).Im_short16 = Im_short16;
        Result(kk).Im_long16 = Im_long16;
        Result(kk).Im_shortIn16 = Im_shortIn16;
        Result(kk).Im_longIn16 = Im_longIn16;
        kk = kk + 1;
        % save the short and long life time images
        filenameLong = [filenameRoot num2str(ii) '_long.tif']; % lifetime file of long lifetime
        filenameShort = [filenameRoot num2str(ii) '_short.tif']; % lifetime file of short lifetime
        filenameLTnew = [filenameRoot num2str(ii) '_LT.tif']; % lifetime file
        filenameLongIn = [filenameRoot num2str(ii) '_longIn.tif']; % intensity file of
        filenameShortIn = [filenameRoot num2str(ii) '_shortIn.tif']; % lifetime file
        
        PathLong = fullfile(dirRoot,filenameLong);
        PathShort = fullfile(dirRoot,filenameShort);
        PathLTnew = fullfile(dirRoot,filenameLTnew);
        PathLongIn = fullfile(dirRoot,filenameLongIn);
        PathShortIn = fullfile(dirRoot,filenameShortIn);
        
        imwrite(Im_short16,PathShort);
        imwrite(Im_long16,PathLong);
        imwrite(ImLT_th,PathLTnew);
        imwrite(Im_shortIn16,PathShortIn);
        imwrite(Im_longIn16,PathLongIn);
    end
end
%%
% create the histogram
[h edges] = histcounts(LT_all,[0.6:0.03:2.4],'Normalization','probability');
xcenter = edges(1:end-1)+diff(edges)/2;
hLT = [xcenter',h'];
% calculate the average lifetime and its standard deviation
LT_mean = [mean(LT_all),std(LT_all)];
In_mean = [mean(In_all),std(In_all)];
filenameS = uiputfile('.mat','Save the results');
save(filenameS,'hLT','Result','LT_all','LT_mean','In_mean','tao_th');
figure
bar(hLT(:,1),hLT(:,2));


