%% tracePlot
%
% This script takes the TrackRefine variable (output from traceInROI.m) and generates
% detailed summary figures for each individual trajectory. It overlays each trajectory on 
% bright-field (BF) and fluorescence (FL) images, plots MSD curves, and shows single-step 
% diffusion coefficients along the trajectory.
%
% Input:
%   - TrackRefine : Cell array structure output from traceInROI.m. Each element contains one trajectory's
%                   coordinates, MSD, rotated ROI outlines, and cropped BF/FL image data.
%
% Output:
%   - Saves a multi-page TIFF file named 'test.tif', each page being a summary figure of one trajectory.
%
% Notes:
%   - Figures are not displayed on screen to save memory (using 'visible', 'off').
%   - Each figure includes 6 subplots:
%       1. BF image + ROI + trace
%       2. FL image + ROI + trace
%       3. MSD curve with linear fit
%       4. Trace color-coded by time (frame)
%       5. Trace color-coded by log10 of single-step diffusion coefficient
%       6. Intensity (photons) vs. frame
%
% Usage:
%   This script is typically used immediately after loading the TrackRefine .mat file
%   generated by traceInROI.m.
%
% Author: Xinxing Yang (modified with English annotation)
% Date: 2024-07-11 @ USTC

%% Clear workspace and load trajectory data
clear
clc
load('TraceRefine-test.mat');  % Load TrackRefine cell array

%% Loop over all trajectories
for ii = 1 : size(TrackRefine,1)

    %% Extract required variables
    Trace = TrackRefine{ii,1}.Coord;
    BFimage = TrackRefine{ii,1}.ROIBFrot;

    if isfield(TrackRefine{ii,1},'ROIFLrot')
        FLimage = TrackRefine{ii,1}.ROIFLrot;
    else
        FLimage = [];
    end

    ROIRotate = TrackRefine{ii,1}.ROIRotate;
    ROIRecRotate = TrackRefine{ii,1}.ROIRecRotate;
    s_MSD = TrackRefine{ii,1}.s_MSD;
    TraceID = TrackRefine{ii,1}.TraceId;

    %% Define axis range to center ROI at (0,0)
    [BFHeight, BFWidth, ~] = size(BFimage);
    xRange = (-BFWidth/2):(BFWidth/2-1);
    yRange = (-BFHeight/2):(BFHeight/2-1);

    %% Initialize invisible figure for saving
    h = figure('visible', 'off');
    set(h, 'position',[100,100,1000,500]);

    %% Subplot 1: BF image with overlaid ROI and trajectory
    subplot('position',[0.04,0.5,0.30,0.45]);
    set(gca, 'XTick', [], 'YTick', []);
    hold on
    imshow(BFimage,[], 'XData', xRange, 'YData', yRange,'InitialMagnification','fit');
    plot(ROIRotate(:,1), ROIRotate(:,2), ':r', 'linewidth', 2);
    plot(ROIRecRotate(:,1), ROIRecRotate(:,2), '-b', 'linewidth', 1.5);
    plot(Trace(:,6), Trace(:,7), '-y', 'linewidth', 1.5);

    %% Subplot 2: FL image with overlaid ROI and trajectory
    subplot('position',[0.34,0.5,0.30,0.45]);
    set(gca, 'XTick', [], 'YTick', []);
    hold on
    if ~isempty(FLimage)
        imshow(FLimage,[], 'XData', xRange, 'YData', yRange,'InitialMagnification','fit');
        plot(ROIRotate(:,1), ROIRotate(:,2), ':y', 'linewidth', 2);
        plot(ROIRecRotate(:,1), ROIRecRotate(:,2), '-c', 'linewidth', 1.5);
    end

    %% Subplot 3: MSD curve with error bar and linear fit
    subplot('position',[0.68,0.52,0.30,0.40]);
    hold on
    errorbar(s_MSD(:,1), s_MSD(:,2), s_MSD(:,4), 'linewidth', 2);
    set(gca, 'FontSize', 8);
    if size(s_MSD,2) > 4
        plot(s_MSD(:,1), s_MSD(:,5), '-.r', 'linewidth', 3);
        text(0.1,0.9, {['D = ' num2str(TrackRefine{ii,1}.D_msd3,3) ' \mum^2/s']}, ...
            'FontSize',10, 'HorizontalAlignment','left', 'VerticalAlignment','top', 'unit','normalized');
    end
    xlabel('Lag Time (s)', 'FontSize', 9);
    ylabel('MSD', 'FontSize', 9);

    %% Subplot 4: Trajectory color-coded by time (frame)
    subplot('position',[0.04,0.1,0.3,0.35]);
    hold on
    plot(ROIRotate(:,1), ROIRotate(:,2), ':r', 'linewidth', 2);
    plot(ROIRecRotate(:,1), ROIRecRotate(:,2), '-b', 'linewidth', 1);
    colorCodeTracePlot(Trace(:,1), Trace(:,6:7), 0.8); % Color-coded trace by frame
    set(gca, 'FontSize', 8);
    title(TraceID, 'FontSize', 10);
    axis equal
    xlabel('Long Axis (pixel)', 'FontSize', 9);
    ylabel('Short Axis (pixel)', 'FontSize', 9);
    xlim([min(ROIRecRotate(:,1))*1.1, max(ROIRecRotate(:,1))*1.1]);
    ylim([min(ROIRecRotate(:,2))*1.5, max(ROIRecRotate(:,2))*3]);
    colorbar('Location','north','AxisLocation','in','FontSize',10,...
             'Label','Time (frame)');

    %% Subplot 5: Trace color-coded by log10 of single-step diffusion coefficient
    subplot('position',[0.34,0.1,0.3,0.35]);
    hold on
    plot(ROIRotate(:,1), ROIRotate(:,2), ':r', 'linewidth', 2);
    plot(ROIRecRotate(:,1), ROIRecRotate(:,2), '-b', 'linewidth', 1);
    scatter(Trace(:,6), Trace(:,7), 12, log10(Trace(:,14)), 'filled');
    axis equal
    xlim([min(ROIRecRotate(:,1))*1.1, max(ROIRecRotate(:,1))*1.1]);
    ylim([min(ROIRecRotate(:,2))*1.5, max(ROIRecRotate(:,2))*3]);
    set(gca, 'YTick', []);
    set(gca, 'FontSize', 8);
    xlabel('Long Axis (pixel)', 'FontSize', 9);
    colorbar('Location','north','AxisLocation','in','FontSize',9,...
             'Label','log10 of D-coeff (μm²/s)');

    %% Subplot 6: Intensity over time
    subplot('position',[0.68,0.1,0.30,0.35]);
    plot(Trace(:,1), Trace(:,5), '-ob', 'linewidth', 1);
    set(gca, 'FontSize', 8);
    xlabel('Time (frame)', 'FontSize', 9);
    ylabel('Intensity (photons)', 'FontSize', 9);

    %% Save figure to multi-page TIFF
    frame = getframe(h);
    imgplot = frame2im(frame);

    if ii == 1
        imwrite(imgplot, 'test.tif', 'tif', 'WriteMode', 'overwrite', 'Compression', 'none');
    else
        imwrite(imgplot, 'test.tif', 'tif', 'WriteMode', 'append', 'Compression', 'none');
    end

    % Save the last frame separately (optional)
    saveas(h, 'test1.tif', 'tif');

    % Close figure to conserve memory
    close(h);

    disp(['Trace #' num2str(ii) ' saved.']);
end

disp('All traces saved!');
